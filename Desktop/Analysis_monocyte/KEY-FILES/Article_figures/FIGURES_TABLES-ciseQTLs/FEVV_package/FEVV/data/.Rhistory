#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
print(z_score)
}
}
RESULTsGenomicFeatures
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
eSNPenrichmentAnalysis <- NULL
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
print(z_score)
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
print(z_score)
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
RESULTsGenomicFeatures
RESULTsChromatinState
View(RESULTsChromatinState)
setwd('/Users/isar.nassiri/Downloads/FEVV/data')
save(eQTL, file="eQTL.rda")
save(BackendData_ChromatinStates, file="BackendData_ChromatinStates.rda")
save(BackendData_GenomicFeatures, file="BackendData_GenomicFeatures.rda")
save(SNPs, file="SNPs.rda")
eSNPenrichmentAnalysis(eQTL, TranscriptName, windowSize=1000000, FDRthreshold = 0.001, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis <- NULL
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis(eQTL, TranscriptName, windowSize=1000000, FDRthreshold = 0.001, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis <- NULL
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eQTL = fread(paste0('/Users/isar.nassiri/Downloads/FEVV/data/eQTL_UT_All.txt'))
BackendData_ChromatinStates = fread("/Users/isar.nassiri/Downloads/FEVV/data/E029_15_coreMarks_hg38lift_dense.bed")  # hg19
BackendData_GenomicFeatures = fread('/Users/isar.nassiri/Downloads/FEVV/data/genomic_regions_DB_TxDb_Biomart_K562_hg38.txt', stringsAsFactors = F, header = T)
SNPs = fread('/Users/isar.nassiri/Downloads/FEVV/data/MAF_imputed_Allsamples_TYPED.txt')
TranscriptName = 'ENSG00000181031'
eSNPenrichmentAnalysis(eQTL, TranscriptName, windowSize=1000000, FDRthreshold = 0.001, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
