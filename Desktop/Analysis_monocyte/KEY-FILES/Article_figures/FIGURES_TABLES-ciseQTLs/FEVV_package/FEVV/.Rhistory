state = BackendData_ChromatinStates[[4]])
#--- enrich foreground
fo <- findOverlaps(query=fGRhg38, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=bGRhg38, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(fGRhg38)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(bGRhg38)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB, treatment = treatment)
if(t==1){RESULTs = temp}else{RESULTs = rbind(RESULTs, temp)}
print(z_score)
}
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(fGRhg38)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(bGRhg38)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTs = temp}else{RESULTs = rbind(RESULTs, temp)}
print(z_score)
}
#--- enrich foreground
fo <- findOverlaps(query=fGRhg38, subject=BackendData_GenomicFeatures, type="any")
foreground_GR = BackendData_GenomicFeatures[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=bGRhg38, subject=BackendData_GenomicFeatures, type="any")
Background_GR = BackendData_GenomicFeatures[subjectHits(fo),]
if(length(foreground_GR)>0)
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
foreground_GR
GRs = unique(foreground_GR$sample)
GRs
variants
library(motifbreakR)
variants <- snps.from.rsid(rsid = as.character("rs4072037"),
dbSNP = SNPlocs.Hsapiens.dbSNP151.GRCh38,
search.genome = BSgenome.Hsapiens.UCSC.hg38)
library(BSgenome)
#vailable.SNPs()
library(SNPlocs.Hsapiens.dbSNP151.GRCh38)       #SNP locations for Homo sapiens (dbSNP Build 151)
library(BSgenome.Hsapiens.UCSC.hg38) #Full genome sequences for Homo sapiens (UCSC version hg38)
library(motifbreakR)
variants <- snps.from.rsid(rsid = as.character("rs4072037"),
dbSNP = SNPlocs.Hsapiens.dbSNP151.GRCh38,
search.genome = BSgenome.Hsapiens.UCSC.hg38)
library(haploR)
df = queryHaploreg(query='rs10774671', ldThresh = 0, ldPop = "EUR")
df
View(df)
LD
maf
mafThreshold = 0.039
SNP = 'rs13149699'
mafThreshold = 0.039
df = queryHaploreg(query='rs13149699', ldThresh = 0, ldPop = "EUR")
#------- chromatin_states
chromatin_states = GRanges(sample = BackendData_ChromatinStates[[4]],
seqnames = gsub('chr','',BackendData_ChromatinStates[[1]]),
ranges = IRanges(BackendData_ChromatinStates[[2]], BackendData_ChromatinStates[[3]]),
state = BackendData_ChromatinStates[[4]])
#------- BackendData_GenomicFeatures
BackendData_GenomicFeatures$seqnames = gsub('chr','',BackendData_GenomicFeatures$seqnames)
BackendData_GenomicFeatures = BackendData_GenomicFeatures[which(BackendData_GenomicFeatures$seqnames %in% c(1:22, 'X')),]
#------- BackendData_GenomicFeatures
BackendData_GenomicFeatures$seqnames = gsub('chr','',BackendData_GenomicFeatures$seqnames)
BackendData_GenomicFeatures = BackendData_GenomicFeatures[which(BackendData_GenomicFeatures$seqnames %in% c(1:22, 'X')),]
BackendData_GenomicFeatures = GRanges(sample = BackendData_GenomicFeatures$sample,
seqnames = BackendData_GenomicFeatures$seqnames,
ranges = IRanges(BackendData_GenomicFeatures$start, BackendData_GenomicFeatures$end),
state = BackendData_GenomicFeatures$state)
#--------------------------------- input
#- query
indexSNP <- SNP
#------- chromatin_states
chromatin_states = GRanges(sample = BackendData_ChromatinStates[[4]],
seqnames = gsub('chr','',BackendData_ChromatinStates[[1]]),
ranges = IRanges(BackendData_ChromatinStates[[2]], BackendData_ChromatinStates[[3]]),
state = BackendData_ChromatinStates[[4]])
#------- BackendData_GenomicFeatures
BackendData_GenomicFeatures$seqnames = gsub('chr','',BackendData_GenomicFeatures$seqnames)
BackendData_GenomicFeatures = BackendData_GenomicFeatures[which(BackendData_GenomicFeatures$seqnames %in% c(1:22, 'X')),]
BackendData_GenomicFeatures = GRanges(sample = BackendData_GenomicFeatures$sample,
seqnames = BackendData_GenomicFeatures$seqnames,
ranges = IRanges(BackendData_GenomicFeatures$start, BackendData_GenomicFeatures$end),
state = BackendData_GenomicFeatures$state)
#--------------------------------- input
#- query
indexSNP <- SNP
SNP_chr_POS = snps.from.rsid(rsid = SNP, dbSNP = SNPlocs.Hsapiens.dbSNP144.GRCh38, search.genome = BSgenome.Hsapiens.UCSC.hg38)
SNP_chr_POS = data.frame(SNP_chr_POS, stringsAsFactors = F)
posQuerySNP <- GRanges(paste0(gsub('chr','',as.character(SNP_chr_POS$seqnames)),':',as.character(SNP_chr_POS$start),'-',as.character(SNP_chr_POS$end))) + windowSize
chr.remote.vcf <- paste0('/Users/isar.nassiri/Downloads/FEVV/data/ALL.chr',SNP_chr,'.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz')
vcfsubset = NULL
vcfsubset <- GetVariantsInWindow(file = chr.remote.vcf,position = posQuerySNP[1],genome = "hg19", type = "vcf")
SNP_chr_POS
SNP_chr_POS$seqnames
gsub('chr','',as.character(SNP_chr_POS$seqnames))
chr.remote.vcf <- paste0('/Users/isar.nassiri/Downloads/FEVV/data/ALL.chr',gsub('chr','',as.character(SNP_chr_POS$seqnames)),'.phase3_shapeit2_mvncall_integrated_v5a.20130502.genotypes.vcf.gz')
vcfsubset = NULL
vcfsubset <- GetVariantsInWindow(file = chr.remote.vcf,position = posQuerySNP[1],genome = "hg19", type = "vcf")
posQuerySNP[1]
vcfsubset <- GetVariantsInWindow(file = chr.remote.vcf,position = posQuerySNP[1], genome = "hg19", type = "vcf")
my.samples = fread('/Users/isar.nassiri/Downloads/FEVV/data/Genotyping1000_samples_metatadata.txt', stringsAsFactors = F)
vcfsubset <- SetPopulation(vcf = vcfsubset, sample_sheet = my.samples)
row.names(vcfsubset) = make.names(row.names(vcfsubset), unique = T)
library(snpStats)
LD <- CalcLD(vcf = vcfsubset, index = indexSNP, population = "EUR")
#----------------- foreground
vcfsubsetsnps <- SplitVcfLd(vcf = LD, ld = c(metric = "R.squared", cutoff = 1, maf = mafThreshold), strict.subset = T) #a strict subset cannot be the same set, that is, it cannot contain all of the elements that the other set does. Or in other words, a strict subset must be smaller, while a subset can be the same size.
length( as.character(names(vcfsubsetsnps$fg)) )
length( as.character(names(vcfsubsetsnps$bg)) )
F1 = as.character(names(vcfsubsetsnps$fg))
fg_variants <- snps.from.rsid(rsid = F1, dbSNP = SNPlocs.Hsapiens.dbSNP144.GRCh38, search.genome = BSgenome.Hsapiens.UCSC.hg38)
LD <- CalcLD(vcf = vcfsubset, index = indexSNP, population = "EUR")
vcfsubsetsnps <- SplitVcfLd(vcf = LD, ld = c(metric = "R.squared", cutoff = 0.001, maf = mafThreshold), strict.subset = T) #a strict subset cannot be the same set, that is, it cannot contain all of the elements that the other set does. Or in other words, a strict subset must be smaller, while a subset can be the same size.
length( as.character(names(vcfsubsetsnps$fg)) )
length( as.character(names(vcfsubsetsnps$bg)) )
bg_variants <- snps.from.rsid(rsid = as.character(names(vcfsubsetsnps$bg)),
dbSNP = SNPlocs.Hsapiens.dbSNP144.GRCh38,
search.genome = BSgenome.Hsapiens.UCSC.hg38)
length(names(vcfsubsetsnps$bg))
foreground_sub = as.data.frame(fg_variants)
foreground_sub$seqnames = gsub('chr', '', foreground_sub$seqnames)
fGRhg38 <- GRanges(
seqnames=Rle(as.character(foreground_sub$seqnames)),
ranges = IRanges(start=as.numeric(foreground_sub$start), end=as.numeric(foreground_sub$end)+1, names=foreground_sub$SNP_ID),
strand = Rle(as.character(foreground_sub$strand))
)
background_sub = as.data.frame(bg_variants)
background_sub$seqnames = gsub('chr', '', background_sub$seqnames)
bGRhg38 <- GRanges(
seqnames=Rle(as.character(background_sub$seqnames)),
ranges = IRanges(start=as.numeric(background_sub$start), end=as.numeric(background_sub$end)+1, names=background_sub$SNP_ID),
strand = Rle(as.character(background_sub$strand))
)
#--- enrich foreground
fo <- findOverlaps(query=fGRhg38, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=bGRhg38, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(fGRhg38)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(bGRhg38)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTs = temp}else{RESULTs = rbind(RESULTs, temp)}
print(z_score)
}
#--- enrich foreground
fo <- findOverlaps(query=fGRhg38, subject=BackendData_GenomicFeatures, type="any")
foreground_GR = BackendData_GenomicFeatures[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=bGRhg38, subject=BackendData_GenomicFeatures, type="any")
Background_GR = BackendData_GenomicFeatures[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs
if(length(foreground_GR)>0)
{
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
length(foreground_GR)
foreground_GR
fGRhg38
BackendData_GenomicFeatures
BackendData_GenomicFeatures
# library(data.table)
# library(GenomicRanges)
# eQTL = fread(paste0('/Users/isar.nassiri/Downloads/FEVV/data/eQTL_UT_All.txt'))
BackendData_ChromatinStates = fread("/Users/isar.nassiri/Downloads/FEVV/data/E029_15_coreMarks_hg38lift_dense.bed")# hg19
BackendData_GenomicFeatures = fread('/Users/isar.nassiri/Downloads/FEVV/data/genomic_regions_DB_TxDb_Biomart_K562_hg38.txt', stringsAsFactors = F, header = T)
BackendData_GenomicFeatures
#------- BackendData_GenomicFeatures
BackendData_GenomicFeatures$seqnames = gsub('chr','',BackendData_GenomicFeatures$seqnames)
BackendData_GenomicFeatures = BackendData_GenomicFeatures[which(BackendData_GenomicFeatures$seqnames %in% c(1:22, 'X')),]
BackendData_GenomicFeatures = GRanges(sample = BackendData_GenomicFeatures$sample,
seqnames = BackendData_GenomicFeatures$seqnames,
ranges = IRanges(BackendData_GenomicFeatures$start, BackendData_GenomicFeatures$end),
state = BackendData_GenomicFeatures$state)
BackendData_GenomicFeatures
#--- enrich foreground
fo <- findOverlaps(query=fGRhg38, subject=BackendData_GenomicFeatures, type="any")
foreground_GR = BackendData_GenomicFeatures[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=bGRhg38, subject=BackendData_GenomicFeatures, type="any")
Background_GR = BackendData_GenomicFeatures[subjectHits(fo),]
if(length(foreground_GR)>0)
{
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}}
length(foreground_GR)
GRs
unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(SNP = indexSNP, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGR = temp}else{RESULTsGR = rbind(RESULTsGR, temp)}
print(z_score)
}
}
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis <- NULL
eSNPenrichmentAnalysis <- function(eQTL, TranscriptName, windowSize, FDRthreshold, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
{
zScore <- function (cntA, totA, cntB, totB) {
#calculate
avgProportion <- (cntA + cntB) / (totA + totB)
probA <- cntA/totA
probB <- cntB/totB
SE <- sqrt(avgProportion * (1-avgProportion)*(1/totA + 1/totB))
zScore <- (probA-probB) / SE
return (zScore)
}
#--------------------------- inputs
states_bed = BackendData_ChromatinStates
chromatin_states = GRanges(sample = states_bed[[4]],
seqnames = gsub('chr','',states_bed[[1]]),
ranges = IRanges(states_bed[[2]], states_bed[[3]]),
state = states_bed[[4]])
genomic_regions = BackendData_GenomicFeatures
genomic_regions$seqnames = gsub('chr','',genomic_regions$seqnames)
genomic_regions = genomic_regions[which(genomic_regions$seqnames %in% c(1:22, 'X')),]
genomic_regions = GRanges(sample = genomic_regions$sample,
seqnames = genomic_regions$seqnames,
ranges = IRanges(genomic_regions$start, genomic_regions$end),
state = genomic_regions$state)
SNPs_Imputed = SNPs
SNPs_Imputed_subject <- GRanges(Rle(as.character(SNPs_Imputed$CHROM)), IRanges(SNPs_Imputed$POS, width=2), rsID = SNPs_Imputed$ID)
SNPs_Imputed = as.data.frame(SNPs_Imputed)
eQTL = eQTL[eQTL$FDR < FDRthreshold,]
eQTL = eQTL[!is.na(eQTL$seqnames),]
eQTL = as.data.frame(eQTL)
#--- select eQTLs
eQTL_sub = eQTL[which(eQTL$gene_id == TranscriptName),]
dim(eQTL_sub)
#--- Foreground_rsIDs
Foreground_rsIDs <- GRanges(paste0(eQTL_sub$seqnames,':',eQTL_sub$SNP_POS,'-',eQTL_sub$SNP_POS), rsID = eQTL_sub$SNP_ID)
length(Foreground_rsIDs)
#--- Background_rsIDs - select SNPs any a 1Mb windows
posQuerySNP <- GRanges(paste0(eQTL_sub$seqnames[1],':',eQTL_sub$start[1],'-',eQTL_sub$start[1])) + windowSize
fo <- findOverlaps(query=posQuerySNP, subject=SNPs_Imputed_subject, type="any")
Background_rsIDs = SNPs_Imputed_subject[subjectHits(fo),]
#--- remove foreground from background
Background_rsIDs = Background_rsIDs[-which(Background_rsIDs$rsID %in% Foreground_rsIDs$rsID),]
length(Background_rsIDs)
#------------------- chromatin state
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=chromatin_states, type="any")
foreground_CS = chromatin_states[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=chromatin_states, type="any")
Background_CS = chromatin_states[subjectHits(fo),]
CSs = unique(foreground_CS$sample)
for(t in 1:length(CSs))
{
cntA=length(which(foreground_CS$sample==CSs[t]))
totA=length(Foreground_rsIDs)
cntB=length(which(Background_CS$sample==CSs[t]))
totB=length(Background_rsIDs)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, CS = CSs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsChromatinState = temp}else{RESULTsChromatinState = rbind(RESULTsChromatinState, temp)}
}
#------------------- genomic features
#--- enrich foreground
fo <- findOverlaps(query=Foreground_rsIDs, subject=genomic_regions, type="any")
foreground_GR = genomic_regions[subjectHits(fo),]
#--- enrich background
fo <- findOverlaps(query=Background_rsIDs, subject=genomic_regions, type="any")
Background_GR = genomic_regions[subjectHits(fo),]
if(length(foreground_GR)>0)
{
GRs = unique(foreground_GR$sample)
for(t in 1:length(GRs))
{
cntA=length(which(foreground_GR$sample==GRs[t]))
totA=length(foreground_GR)
cntB=length(which(Background_GR$sample==GRs[t]))
totB=length(Background_GR)
table = c(cntA, totA, cntB, totB)
dim(table)<-c(2,2)
fishert <- fisher.test(table)
z_score = zScore(cntA, totA, cntB, totB)
temp = data.frame(gene = TranscriptName, GR = GRs[t], p = fishert$p.value, oddsratio = fishert$estimate, CIl= fishert$conf.int[1], CIh = fishert$conf.int[2], zScore = z_score, FE = cntA, FA = totA, BE = cntB, BA = totB)
if(t==1){RESULTsGenomicFeatures = temp}else{RESULTsGenomicFeatures = rbind(RESULTsGenomicFeatures, temp)}
}
}
#------------------- save outputs
return(RESULTsGenomicFeatures)
return(RESULTsChromatinState)
print("You can find the results in R object under title of 'RESULTsGenomicFeatures' and 'RESULTsChromatinState'.")
}
eSNPenrichmentAnalysis(eQTL, TranscriptName = 'ENSG00000181031', windowSize=1000000, FDRthreshold = 0.001, BackendData_GenomicFeatures, BackendData_ChromatinStates, SNPs)
library(stringi)
library(BiocCheck)
library("devtools")
library(roxygen2)
#add rda files to data folder + add R scripts to R folder
setwd ("/Volumes/Isar_Nassiri_Fairfax_lab/FEVV")
document()
#add rda files to data folder + add R scripts to R folder
#restart R first
setwd ("/Volumes/Isar_Nassiri_Fairfax_lab/FEVV")
document()
#add rda files to data folder + add R scripts to R folder
#restart R first
setwd ("/Volumes/Isar_Nassiri_Fairfax_lab/FEVV")
document()
document()
